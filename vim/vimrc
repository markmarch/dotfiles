filetype off
call pathogen#runtime_append_all_bundles()
filetype plugin indent on

" Auto source when write to vimrc file
if has("autocmd")
    autocmd bufwritepost .vimrc source $MYVIMRC
endif

set fileformats=unix
set shell=/bin/bash
set nocompatible
syntax on
set modelines=0

colorscheme badwolf

if has('gui_running')
    set guifont=Source\ Code\ Pro:h14
end

" Remove scrollbar in gui
set guioptions-=R

set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set relativenumber
set undofile

let mapleader = ","

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
set nocursorline
set nocursorcolumn
nnoremap <leader><space> :noh<CR>
nnoremap <tab> %
vnoremap <tab> %

set wrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=85

set wildignore+=.git
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.sw?
set wildignore+=*.ds_store
set wildignore+=*.class
set wildignore+=*.pyc

" resize split when window resizes
au VimResized :wincmd =

" Backup
set backup
set noswapfile

set undodir=~/.vim_tmp/undo//
set backupdir=~/.vim_tmp/backup//
set directory=~/.vim_tmp/swap//

if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" Highlight merge conflict
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" Sort lines
nnoremap <leader>s vip:!sort<cr>
vnoremap <leader>s :!sort<cr>

nnoremap D d$

" Folding
set foldlevelstart=0
set foldnestmax=10
set foldmethod=indent
set nofoldenable

" Space to toggle folding
nnoremap <Space> za
vnoremap <Space> za

" Make zO recursively open top level fold we are in
" no matter where the current line is
nnoremap zO zCzO
nnoremap <c-z> mzzMzvzz15<c-e>`z:Pulse<CR>

vmap <D-j> gj
vmap <D-k> gk
vmap <D-4> g$
vmap <D-6> g^
vmap <D-0> g^
nmap <D-j> gj
nmap <D-k> gk
nmap <D-4> g$
nmap <D-6> g^
nmap <D-0> g^

set list
set listchars=tab:▸\ ,eol:¬
nnoremap <leader>l :set list!<CR>

nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

nnoremap ; :

au FocusLost * :wa

nnoremap <leader>v V`]

inoremap jj <ESC>

nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Little function
" Uppercase current word in insert mode
inoremap <C-u> <esc>mzgUiw`za


" Plugins
" NERDTree
" automatcially open a NERDTree when vim opens
autocmd vimenter * if !argc() | NERDTree | endif
nnoremap <leader>t :NERDTreeToggle<CR>

" Ack
nnoremap <leader>a :Ack

" Rainbow brackets
let g:rbpt_colorpairs =[
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rbpt_max=16
let g:rbpt_loadcmd_toggle=0

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
au Syntax * RainbowParenthesesLoadChevrons

" Powerline
" python from powerline.bindings.vim import source_plugin; source_plugin()

" Gundo
nnoremap <leader>u :GundoToggle<CR>

" CtrlP
let g:ctrlp_working_path_mode = "ra"
let g:ctrlp_custom_ignore = '\v[\/]target$'
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0

" neocomplcache
let g:neocomplcache_enable_at_startup = 1

" neocomplcache
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_min_syntax_length = 3
inoremap <expr><C-g> neocomplcache#undo_completion()
inoremap <expr><C-l> neocomplcache#complete_common_string()
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"


" Omni completion
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Scala quickfix
set errorformat=%E\ %#[error]\ %#%f:%l:\ %m,%-Z\ %#[error]\ %p^,%-C\ %#[error]\ %m
set errorformat+=,%W\ %#[warn]\ %#%f:%l:\ %m,%-Z\ %#[warn]\ %p^,%-C\ %#[warn]\ %m
set errorformat+=,%-G%.%#

noremap <silent> <Leader>gf :cf target/quickfix/sbt.quickfix<CR>
noremap <silent> <Leader>gn :cn<CR>

" Syntastic
" Ignore html file
let g:syntastic_disabled_filetypes = ['html']
